<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flappy Bird</title>
    <style>
        canvas {
            border: 1px solid #d3d3d3;
            background-color: #f1f1f1;
            display: block;
            margin: auto;
        }
        body {
            text-align: center;
            font-family: Arial, sans-serif;
        }
    </style>
    <script>
        var myGamePiece;
        var myObstacles = [];
        var myScore;

        var myGameArea = {
            canvas: document.createElement("canvas"),
            start: function () {
                this.canvas.width = 960;
                this.canvas.height = 540;
                this.context = this.canvas.getContext('2d');
                document.body.insertBefore(this.canvas, document.body.childNodes[0]);
                this.frameNo = 0;
                this.interval = setInterval(updateGameArea, 20);
            },
            clear: function () {
                this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
            }
        }

        function component(width, height, color, x, y, type) {
            this.type = type;
            this.score = 0;
            this.width = width;
            this.height = height;
            this.speedX = 0;
            this.speedY = 0;
            this.x = x;
            this.y = y;
            this.gravity = 0;
            this.gravitySpeed = 0;

            this.update = function () {
                ctx = myGameArea.context;
                if (this.type === "text") {
                    ctx.font = this.width + " " + this.height;
                    ctx.fillStyle = color;
                    ctx.fillText(this.text, this.x, this.y);
                } else if (this.type === "image") {
                    let img = new Image();
                    img.src = color;
                    ctx.drawImage(img, this.x, this.y, this.width, this.height);
                } else {
                    ctx.fillStyle = color;
                    ctx.fillRect(this.x, this.y, this.width, this.height);
                }
            }

            this.newPos = function () {
                this.gravitySpeed += this.gravity;
                this.x += this.speedX;
                this.y += this.speedY + this.gravitySpeed;

                // Ceiling check
                if (this.y < 0) {
                    this.y = 0;
                    this.gravitySpeed = 0;
                }

                // Floor check
                this.hitBottom();
            }

            this.hitBottom = function () {
                var rockbottom = myGameArea.canvas.height - this.height;
                if (this.y > rockbottom) {
                    this.y = rockbottom;
                    this.gravitySpeed = 0;
                }
            }

            this.crashWith = function (otherobj) {
                var myleft = this.x;
                var myright = this.x + (this.width);
                var mytop = this.y;
                var mybottom = this.y + (this.height);
                var otherleft = otherobj.x;
                var otherright = otherobj.x + (otherobj.width);
                var othertop = otherobj.y;
                var otherbottom = otherobj.y + (otherobj.height);
                var crash = true;
                if ((mybottom < othertop) ||
                    (mytop > otherbottom) ||
                    (myright < otherleft) ||
                    (myleft > otherright)) {
                    crash = false;
                }
                return crash;
            }
        }

        function startGame() {
            myGamePiece = new component(30, 30, "Eagle.webp", 10, 120, "image"); // bird image
            myGamePiece.gravity = 0.05;
            myScore = new component("30px", "Consolas", "black", 280, 40, "text");
            myGameArea.start();
        }

        function updateGameArea() {
            var x, height, gap, minHeight, maxHeight, minGap, maxGap;

            // Collision detection
            for (i = 0; i < myObstacles.length; i++) {
                if (myGamePiece.crashWith(myObstacles[i])) {
                    return; // game over
                }
            }

            myGameArea.clear();
            myGameArea.frameNo += 1;

            // Generate obstacles
            if (myGameArea.frameNo === 1 || everyinterval(150)) {
                x = myGameArea.canvas.width;
                minHeight = 20;
                maxHeight = 200;
                height = Math.floor(Math.random() * (maxHeight - minHeight + 1) + minHeight);
                minGap = 40;
                maxGap = 100;
                gap = Math.floor(Math.random() * (maxGap - minGap + 1) + minGap);
                myObstacles.push(new component(10, height, "green", x, 0));
                myObstacles.push(new component(10, myGameArea.canvas.height - height - gap, "green", x, height + gap));
            }

            // Move and update obstacles
            for (i = 0; i < myObstacles.length; i++) {
                myObstacles[i].x += -1;
                myObstacles[i].update();
            }

            myScore.text = "SCORE: " + myGameArea.frameNo;
            myScore.update();
            myGamePiece.newPos();
            myGamePiece.update();
        }

        function everyinterval(n) {
            return (myGameArea.frameNo / n) % 1 === 0;
        }

        function accelerate(n) {
            myGamePiece.gravity = n;
        }
    </script>
</head>
<body onload="startGame()">
    <br>
    <button onmousedown="accelerate(-0.2)" onmouseup="accelerate(0.05)">ACCELERATE</button>
    <p>Use the 'ACCELERATE' button to stay in the air</p>
    <p>How long can you last?</p>
    <p>Reload to restart</p>
</body>
</html>
